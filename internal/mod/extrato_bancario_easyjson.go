// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package mod

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonCb346c17DecodeGithubComVitorsalgadoRinhaBackend2024Q1GoInternalMod(in *jlexer.Lexer, out *Extrato) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "saldo":
			easyjsonCb346c17DecodeGithubComVitorsalgadoRinhaBackend2024Q1GoInternalMod1(in, &out.Saldo)
		case "ultimas_transacoes":
			if in.IsNull() {
				in.Skip()
				out.UltimasTransacoes = nil
			} else {
				in.Delim('[')
				if out.UltimasTransacoes == nil {
					if !in.IsDelim(']') {
						out.UltimasTransacoes = make([]ExtratoTransacao, 0, 1)
					} else {
						out.UltimasTransacoes = []ExtratoTransacao{}
					}
				} else {
					out.UltimasTransacoes = (out.UltimasTransacoes)[:0]
				}
				for !in.IsDelim(']') {
					var v1 ExtratoTransacao
					easyjsonCb346c17DecodeGithubComVitorsalgadoRinhaBackend2024Q1GoInternalMod2(in, &v1)
					out.UltimasTransacoes = append(out.UltimasTransacoes, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonCb346c17EncodeGithubComVitorsalgadoRinhaBackend2024Q1GoInternalMod(out *jwriter.Writer, in Extrato) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"saldo\":"
		out.RawString(prefix[1:])
		easyjsonCb346c17EncodeGithubComVitorsalgadoRinhaBackend2024Q1GoInternalMod1(out, in.Saldo)
	}
	{
		const prefix string = ",\"ultimas_transacoes\":"
		out.RawString(prefix)
		if in.UltimasTransacoes == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.UltimasTransacoes {
				if v2 > 0 {
					out.RawByte(',')
				}
				easyjsonCb346c17EncodeGithubComVitorsalgadoRinhaBackend2024Q1GoInternalMod2(out, v3)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Extrato) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonCb346c17EncodeGithubComVitorsalgadoRinhaBackend2024Q1GoInternalMod(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Extrato) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonCb346c17EncodeGithubComVitorsalgadoRinhaBackend2024Q1GoInternalMod(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Extrato) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonCb346c17DecodeGithubComVitorsalgadoRinhaBackend2024Q1GoInternalMod(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Extrato) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonCb346c17DecodeGithubComVitorsalgadoRinhaBackend2024Q1GoInternalMod(l, v)
}
func easyjsonCb346c17DecodeGithubComVitorsalgadoRinhaBackend2024Q1GoInternalMod2(in *jlexer.Lexer, out *ExtratoTransacao) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "tipo":
			out.Tipo = string(in.String())
		case "valor":
			out.Valor = int(in.Int())
		case "descricao":
			out.Descricao = string(in.String())
		case "realizada_em":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.RealizadaEm).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonCb346c17EncodeGithubComVitorsalgadoRinhaBackend2024Q1GoInternalMod2(out *jwriter.Writer, in ExtratoTransacao) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"tipo\":"
		out.RawString(prefix[1:])
		out.String(string(in.Tipo))
	}
	{
		const prefix string = ",\"valor\":"
		out.RawString(prefix)
		out.Int(int(in.Valor))
	}
	{
		const prefix string = ",\"descricao\":"
		out.RawString(prefix)
		out.String(string(in.Descricao))
	}
	{
		const prefix string = ",\"realizada_em\":"
		out.RawString(prefix)
		out.Raw((in.RealizadaEm).MarshalJSON())
	}
	out.RawByte('}')
}
func easyjsonCb346c17DecodeGithubComVitorsalgadoRinhaBackend2024Q1GoInternalMod1(in *jlexer.Lexer, out *ExtratoSaldo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "total":
			out.Total = int(in.Int())
		case "data_extrato":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.DataExtrato).UnmarshalJSON(data))
			}
		case "limite":
			out.Limite = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonCb346c17EncodeGithubComVitorsalgadoRinhaBackend2024Q1GoInternalMod1(out *jwriter.Writer, in ExtratoSaldo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"total\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Total))
	}
	{
		const prefix string = ",\"data_extrato\":"
		out.RawString(prefix)
		out.Raw((in.DataExtrato).MarshalJSON())
	}
	{
		const prefix string = ",\"limite\":"
		out.RawString(prefix)
		out.Int(int(in.Limite))
	}
	out.RawByte('}')
}
